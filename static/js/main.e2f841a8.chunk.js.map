{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/CharCard/index.js","components/CardWrapper/index.js","components/Message/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","score","highScore","Footer","CharCard","alt","name","src","imglink","onClick","clickCard","id","CardWrapper","children","Message","message","App","state","characters","clickedArray","shuffleArray","shufArr","i","length","j","Math","floor","random","shuffledArr","console","log","setState","includes","concat","this","map","img","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qyCAWeA,G,MARA,SAAAC,GAAK,OAChB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAAf,eAAmC,0BAAMA,UAAU,cAAhB,oBAEnC,yBAAKA,UAAU,SAAf,UAA+BD,EAAME,MAArC,oBAA6DF,EAAMG,c,MCE5DC,MANf,WACI,OACI,yBAAKH,UAAU,sBAAf,4BCSOI,G,MAXE,SAACL,GAAD,OAET,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,gBAAgBK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,QAASC,QAAS,kBAAMV,EAAMW,UAAUX,EAAMY,OACzG,yBAAKX,UAAU,gB,OCQhBY,G,MAPK,SAACb,GAAD,OAEZ,yBAAKC,UAAU,gBAAgBD,EAAMc,YCF9BC,G,MANC,SAAAf,GAAK,OACjB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,QAAQD,EAAMgB,YCkFtBC,E,2MA3EbC,MAAQ,CACNC,aACAjB,MAAO,EACPC,UAAW,EACXiB,aAAc,GACdJ,QAAS,2B,EAGXK,aAAe,SAACC,GACd,IAAK,IAAIC,EAAID,EAAQE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAEhB,CAACD,EAAQG,GAAIH,EAAQC,IAA/CD,EAAQC,GAFkC,KAE9BD,EAAQG,GAFsB,KAI/C,OAAOH,G,EAGPX,UAAY,SAAAC,GACV,IAAMiB,EAAc,EAAKR,aAAaF,GACtCW,QAAQC,IAAIF,GACR,EAAKG,SAAS,CAAEb,WAAYU,IAC5B,EAAKX,MAAME,aAAaa,SAASrB,GACnC,EAAKoB,SAAS,CAAE9B,MAAO,EACrBkB,aAAc,GACdJ,QAAS,sEAIX,EAAKgB,SAAS,CACZZ,aAAc,EAAKF,MAAME,aAAac,OAAO,CAACtB,IAC9CV,MAAO,EAAKgB,MAAMhB,MAAQ,EAC1Bc,QAAS,2BAMT,EAAKE,MAAMhB,MAAQ,EAAKgB,MAAMf,WAChC,EAAK6B,SAAS,CAAE7B,UAAW,EAAKe,MAAMhB,S,wEAMhC,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEA,MAAOiC,KAAKjB,MAAMhB,MAClBC,UAAWgC,KAAKjB,MAAMf,UACtBa,QAASmB,KAAKjB,MAAMF,UAE9B,kBAAC,EAAD,CACEA,QAASmB,KAAKjB,MAAMF,UAEd,kBAAC,EAAD,KACGG,EAAWiB,KAAI,SAAAC,GAAG,OAEjB,kBAAC,EAAD,CACEzB,GAAIyB,EAAIzB,GACR0B,IAAKD,EAAIzB,GACTH,QAAS4B,EAAI5B,QACbE,UAAW,EAAKA,gBAKtB,kBAAC,EAAD,W,GArEU4B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMxC,c","file":"static/js/main.e2f841a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <div className=\"title\">Click-A-Rama<span className=\"headerSpan\"> (A React Game)</span></div>\r\n        {/* <div className=\"mesg\">{props.message}</div> */}\r\n        <div className=\"score\">Score: {props.score}  |  High Score: {props.highScore}</div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer text-center\">Â© 2020 Jarkko Haarla</div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./CharCard.css\";\r\n\r\nconst CharCard = (props) => (\r\n    // <div className=\"card-container\">\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <img className=\"img-thumbnail\" alt={props.name} src={props.imglink} onClick={() => props.clickCard(props.id)}/>\r\n                <div className=\"overlay\" />\r\n            </div>\r\n        </div>\r\n    // </div>\r\n)\r\n\r\nexport default CharCard;\r\n","import React from \"react\";\r\nimport \"./cardWrapper.css\";\r\n\r\n// function CardWrapper(props) {\r\n//     return (\r\n//         <div className=\"card-wrapper\">{props.children}</div>\r\n//     )\r\n// };\r\n\r\nconst CardWrapper = (props) => (\r\n     \r\n        <div className=\"card-wrapper\">{props.children}</div>\r\n    \r\n);\r\n\r\n\r\nexport default CardWrapper;\r\n","import React from \"react\";\r\nimport \"./message.css\";\r\n\r\nconst Message = props => (\r\n    <div className=\"message\">\r\n        <div className=\"mesg\">{props.message}</div>\r\n    </div>\r\n);\r\n\r\nexport default Message;","import React, { Component } from \"react\";\n// import Component from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport CharCard from \"./components/CharCard\";\nimport characters from \"./futurama.json\";\nimport CardWrapper from \"./components/CardWrapper\";\nimport Message from \"./components/Message\";\n\nclass App extends Component {\n\n  // function App() {\n  state = {\n    characters,\n    score: 0,\n    highScore: 0,\n    clickedArray: [],\n    message: \"Click an image to begin\"\n  }\n\n  shuffleArray = (shufArr) => {\n    for (let i = shufArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shufArr[i], shufArr[j]] = [shufArr[j], shufArr[i]];\n  }\n  return shufArr;\n  };\n\n  clickCard = id => {\n    const shuffledArr = this.shuffleArray(characters);\n    console.log(shuffledArr);\n        this.setState({ characters: shuffledArr });\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, \n        clickedArray: [], \n        message: \"Incorrect!! Game Over ðŸ˜« Click an image to start again.\"});\n    }\n    else {\n\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]), \n        score: this.state.score + 1, \n        message: \"Correct!! ðŸ˜Š\"\n        // highScore: if\n      });\n    }\n\n    // set highscore to score if score> highscore\n    if (this.state.score > this.state.highScore) {\n      this.setState({ highScore: this.state.score });\n    }\n  };\n\n  \n\n  render() {\n    return (\n      <>\n        <Header \n          score={this.state.score}\n          highScore={this.state.highScore}\n          message={this.state.message}\n          />\n<Message\n  message={this.state.message}\n   />\n        <CardWrapper>\n          {characters.map(img => (\n\n            <CharCard\n              id={img.id}\n              key={img.id}\n              imglink={img.imglink}\n              clickCard={this.clickCard}\n            />\n\n          ))}\n        </CardWrapper>\n        <Footer />\n      </>\n    )\n  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}